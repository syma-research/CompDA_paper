---
title: "Linear Y performance comparison (knockoff)"
output: html_document
---

* Method described in [Srinivasan, Lingzhou Xue, and Zhan, Biometrics, 2021](https://pubmed.ncbi.nlm.nih.gov/32683674/)

* This requires the packages `knockoff`, `energy`, `GUniFrac`, `RSpectra`, `gurobi`, 
  and [`MethylCapSig`](https://github.com/cran/MethylCapSig)

```{r setup, include=FALSE}
rm(list = ls())
library(magrittr)
library(ggplot2)
```

```{r nodewise batch job}
# batchtools::makeRegistry(
#   file.dir = "/n/janson_lab/lab/sma/CompDA_paper/r_batchtools_reg/knockoff",
#   package = c("magrittr"))
batchtools::loadRegistry(
  file.dir = "/n/janson_lab/lab/sma/CompDA_paper/r_batchtools_reg/knockoff",
  writeable = TRUE)
rm(list = ls())
```

```{r nodewise}
dir_output <- "/n/janson_lab/lab/sma/CompDA_paper/results/simulation/linear_Y"
load(paste0(dir_output, "/tb_job.RData"))
tb_job_knockoff <- 
  tb_job %>% 
  dplyr::filter(n_features == 200,
                signal_density == 0.1,
                effect_size == 0.15) %>% 
  dplyr::mutate(i_job_knockoff = seq(1, dplyr::n()))
save(tb_job_knockoff, file = paste0(dir_output, "/tb_job_knockoff.RData"))

one_job <- function(i_job) {
  # x data
  load("/n/janson_lab/lab/sma/CRT_microbiome/results/simulation/real_X/data_XY/mat_species.RData")
  source("/n/janson_lab/lab/sma/CompDA_paper/R/helpers.R")
  source("/n/janson_lab/lab/sma/CompDA_paper/R/knockoff/functionsCKF.R")
  source("/n/janson_lab/lab/sma/CompDA_paper/R/knockoff/utilityFnCKF.R")
  source("/n/janson_lab/lab/sma/CompDA_paper/R/knockoff/knockoff_main.R")
  
  load(paste0(dir_output, "/tb_job_knockoff.RData"))
  for(ii_job in seq((i_job - 1) * n_job_each + 1, i_job * n_job_each)) {
    i_tb_job <- tb_job_knockoff[ii_job, ]
    set.seed(i_tb_job$seed)
    
    i_x_obs <- mat_species[sample.int(nrow(mat_species), 
                                      size = i_tb_job$n_features),
                           seq(i_tb_job$n_samples * (i_tb_job$r_x - 1) + 1, 
                               i_tb_job$n_samples * i_tb_job$r_x)] %>% 
      apply(2, tss_withzero) %>% 
      t() 
    
    half_min <- min(setdiff(i_x_obs, 0)) / 2
    load(paste0(dir_output, "/data/y_sim_", i_tb_job$i_job, ".RData"))
    
    fit_knockoff <- 
      knockoff_R(x = i_x_obs, y = y_sim$y, epsilon = half_min, 60 * 10,
                 dir_debug = paste0(dir_output, "/debug/knockoff_",
                                    i_job))
    save(fit_knockoff, 
         file = paste0(dir_output, "/fit/knockoff_", i_tb_job$i_job, ".RData"))
  }
  
  return(NULL)
}
```

```{r nodewise submit jobs}
batchtools::clearRegistry()
n_job_each <- 1
tb_ids <- batchtools::batchMap(one_job,
                               i_job = seq(1, nrow(tb_job_knockoff) / n_job_each))
batchtools::batchExport(list(dir_output = dir_output,
                             n_job_each = n_job_each))

# Grid parameters
ncpus <- 1
partition <- "janson,janson_cascade,shared"
walltime <- 3600
memory <- 1024 * 4

batchtools::submitJobs(ids = seq(1, 10),
                       resources =  list(ncpus = ncpus,
                                         partition = partition,
                                         walltime = walltime,
                                         memory = memory))
batchtools::submitJobs(ids = batchtools::findNotSubmitted(),
                       resources =  list(ncpus = ncpus,
                                         partition = partition,
                                         walltime = walltime,
                                         memory = memory))
```

```{r summarize results}
batchtools::loadRegistry(
  file.dir = "/n/janson_lab/lab/sma/CRT_microbiome/r_batchtools_reg/real_X/linear_Y/03_29_2023",
  writeable = FALSE)
load(paste0(dir_output, "/tb_job_knockoff.RData"))

i_finished <- batchtools::findDone()$job.id
tb_results_knockoff <- i_finished %>% 
  purrr::map_dfr(function(i_done) {
    i_job <- tb_job_knockoff$i_job[i_done]
    load(paste0(dir_output, "/y_sim_", i_job, ".RData"))
    load(paste0(dir_output, "/knockoff_short", i_job, ".RData"))
    load(paste0(dir_output, "/knockoff_long", i_job, ".RData"))
    list(fit_knockoff1, 
         fit_knockoff2) %>% 
      purrr::map2_dfr(
        c("short", "long"),
        function(fit_knockoff, runtime) {
          c(1, 2, 3) %>% 
            purrr::map2_dfr(
              c("knockoff+", "knockoff", "screen"),
              function(i_col, i_method) {
                pos <- fit_knockoff[, i_col] < 0.1
                tibble::tibble(
                  power = mean(pos[y_sim$ind_TP]),
                  fdr = {
                    if(!any(pos))
                      0
                    else
                      sum((!y_sim$ind_TP) & pos) / sum(pos)
                  },
                  method = i_method,
                  i_job = i_job)
              }) %>% 
            dplyr::mutate(runtime = runtime)
        })
    
  })
# tb_results_knockoff <- i_finished %>% 
#   purrr::map_dfr(function(i_done) {
#     i_job <- tb_job_knockoff$i_job[i_done]
#     load(paste0(dir_output, "/y_sim_", i_job, ".RData"))
#     load(paste0(dir_output, "/knockoff_", i_job, ".RData"))
#     
#     n_tp <- sum(y_sim$ind_TP & (fit_knockoff[, 3] == 0))
#     n_fp <- sum(!y_sim$ind_TP & (fit_knockoff[, 3] == 0))
#     
#     return(tibble::tibble(n_tp = n_tp, n_fp = n_fp, i_job = i_job))
#   })

load(paste0(dir_output, "/tb_job.RData"))
tb_results_knockoff <- tb_results_knockoff %>% 
  dplyr::left_join(tb_job, by = "i_job")
save(tb_results_knockoff, file = "/n/janson_lab/lab/sma/CRT_microbiome/results/simulation/real_X/linear_Y/tb_results_knockoff.RData")

load("/n/janson_lab/lab/sma/CRT_microbiome/results/simulation/real_X/linear_Y/tb_results.RData")


# tb_results_summary <- tb_results_knockoff %>% 
#   dplyr::group_by(n_samples, n_features, signal_density, effect_size, r_x) %>% 
#   dplyr::summarise(n_tp = mean(n_tp),
#                    n_fp = mean(n_fp)) %>% 
#   dplyr::group_by(n_samples, n_features, signal_density, effect_size) %>% 
#   dplyr::summarise(tp_mean = mean(n_tp),
#                    tp_sd = sd(n_tp) / sqrt(dplyr::n()),
#                    fp_mean = mean(n_fp),
#                    fp_sd = sd(n_fp) / sqrt(dplyr::n()))
# 
# p_tp <- tb_results_summary %>% 
#   ggplot(aes(x = n_samples, y = tp_mean)) +
#   geom_point() +
#   geom_errorbar(aes(ymax = tp_mean + tp_sd,
#                     ymin = tp_mean - tp_sd)) +
#   geom_line() +
#   theme_bw()
# 
# p_fp <- tb_results_summary %>% 
#    ggplot(aes(x = n_samples, y = fp_mean)) +
#   geom_point() +
#   geom_errorbar(aes(ymax = fp_mean + fp_sd,
#                     ymin = fp_mean - fp_sd)) +
#   geom_line() +
#   theme_bw()


tb_results_summary <- tb_results_knockoff %>% 
  # rbind(tb_results, tb_results_knockoff) %>% 
  dplyr::group_by(runtime, method, n_samples, n_features, signal_density, effect_size, r_x) %>% 
  dplyr::summarise(power_mean_y = mean(power),
                   fdr_mean_y = mean(fdr)) %>% 
  dplyr::group_by(runtime, method, n_samples, n_features, signal_density, effect_size) %>% 
  dplyr::summarise(power_mean = mean(power_mean_y),
                   power_sd = sd(power_mean_y) / sqrt(dplyr::n()),
                   fdr_mean = mean(fdr_mean_y),
                   fdr_sd = sd(fdr_mean_y) / sqrt(dplyr::n()))

p_sampleSize_power <- tb_results_summary %>% 
  dplyr::filter(runtime == "short") %>% 
  dplyr::filter(n_features == 200,
                effect_size == 0.15,
                signal_density == 0.1,
                n_samples %in% c(50, 200, 400)) %>% 
  ggplot(aes(x = n_samples, y = power_mean, color = method)) +
  geom_point() +
  geom_errorbar(aes(ymax = power_mean + power_sd,
                    ymin = power_mean - power_sd)) +
  geom_line() +
  # facet_grid(.~runtime) +
  theme_bw()

p_sampleSize_fdr <- tb_results_summary %>% 
  dplyr::filter(runtime == "short") %>%
  dplyr::filter(n_features == 200,
                effect_size == 0.15,
                signal_density == 0.1,
                n_samples %in% c(50, 200, 400)) %>% 
  ggplot(aes(x = n_samples, y = fdr_mean, color = method)) +
  geom_point() +
  geom_errorbar(aes(ymax = fdr_mean + fdr_sd,
                    ymin = fdr_mean - fdr_sd)) +
  geom_line() +
  geom_hline(yintercept = 0.1, linetype = "dashed") +
  # facet_grid(.~runtime) +
  theme_bw()

cowplot::plot_grid(p_sampleSize_power, p_sampleSize_fdr, nrow = 1) %>% 
  ggsave(filename = "/n/janson_lab/lab/sma/CRT_microbiome/results/simulation/real_X/linear_Y/knockoff.jpeg",
         ., width = 10, height = 5)

p_dimension_power <- tb_results_summary %>% 
  dplyr::filter(n_samples == 200,
                effect_size == 0.15,
                signal_density == 0.1) %>% 
  ggplot(aes(x = n_features, y = power_mean, color = method)) +
  geom_point() +
  geom_errorbar(aes(ymax = power_mean + power_sd,
                    ymin = power_mean - power_sd)) +
  geom_line() +
  theme_bw()

p_dimension_fdr <- tb_results_summary %>% 
  dplyr::filter(n_samples == 200,
                effect_size == 0.15,
                signal_density == 0.1) %>% 
  ggplot(aes(x = n_features, y = fdr_mean, color = method)) +
  geom_point() +
  geom_errorbar(aes(ymax = fdr_mean + fdr_sd,
                    ymin = fdr_mean - fdr_sd)) +
  geom_line() +
  geom_hline(yintercept = 0.05, linetype = "dashed") +
  theme_bw()

cowplot::plot_grid(p_dimension_power, p_dimension_fdr, nrow = 1) %>% 
  ggsave(filename = "/n/janson_lab/lab/sma/CRT_microbiome/meeting_notes/06_22_22_meeting/dimension.jpeg",
         ., width = 10, height = 5)

tb_pval_check <- tb_job %>% 
  dplyr::filter(effect_size == 0,
                n_samples == 200,
                n_features == 200,
                signal_density == 0.1) %>% 
  {.$i_job} %>% 
  purrr::map_dfr(function(i_job) {
    load(paste0(dir_output, "/microCRT_", i_job, ".RData"))
    load(paste0(dir_output, "/y_sim_", i_job, ".RData"))
    
    data.frame(pval = fit_microCRT,
               ind_TP = y_sim$ind_TP) %>% 
      dplyr::mutate(feature = seq(1, dplyr::n())) %>% 
      dplyr::mutate(i_job = i_job)
  })

p_pval <- tb_pval_check %>% 
  # dplyr::filter(pval != 1) %>% 
  ggplot(aes(x = pval)) +
  geom_histogram(bins = 100) +
  facet_grid(.~ind_TP)

load("/n/janson_lab/lab/sma/CRT_microbiome/results/simulation/real_X/data_XY/mat_species.RData")
source("/n/janson_lab/lab/sma/CRT_microbiome/CRT_microbiome/R/helpers.R")

tb_all_zeros <- tb_job %>% 
  dplyr::filter(effect_size == 0,
                n_samples == 200,
                n_features == 200,
                signal_density == 0.1) %>% 
  {.$i_job} %>% 
  purrr::map_dfr(
    function(i_job) {
      load(paste0(dir_output, "/y_sim_", i_job, ".RData"))
      
      i_tb_job <- tb_job[i_job, ]
      i_x_obs <- mat_species[sample.int(nrow(mat_species), 
                                        size = i_tb_job$n_features),
                             seq(i_tb_job$n_samples * (i_tb_job$r_x - 1) + 1, 
                                 i_tb_job$n_samples * i_tb_job$r_x)] %>% 
        apply(2, tss_withzero) %>% 
        t() 
      tibble::tibble(
        n_all_zero_tp = sum(apply(i_x_obs[, y_sim$ind_TP] == 0, 2, all)),
        n_all_zero_null = sum(apply(i_x_obs[, !y_sim$ind_TP] == 0, 2, all)),
        i_job = i_job
      )
    }
  )

tb_pval_check %>% 
  dplyr::filter(pval == 1, ind_TP == FALSE, i_job == 1501)
```

```{r copmare different vers. of microCRT pvals}
load(paste0(dir_output, "/tb_job.RData"))

l_tb_check_microCRT <- list()
for(i_job in {
  tb_job %>% 
    dplyr::filter(n_samples == 200,
                  n_features == 200,
                  signal_density == 0.1) %>% 
    {.$i_job}
}) {
  load(paste0(dir_output, "/y_sim_", i_job, ".RData"))
  load(paste0(dir_output, "/debug/microCRT_", i_job, ".RData"))
  ps <- l_fits %>% 
    purrr::imap_dfr(function(i_fit, i_feature) {
      data.frame(
        p = i_fit$ps_full,
        method = c("homo", "homo_stand", "hetero", "hetero_stand"),
        feature = i_feature
      )
    })
  i_tb_check_microCRT <- ps %>% 
    dplyr::group_by(method) %>% 
    dplyr::mutate(q = p.adjust(p, method = "BH"),
                  pos = q < 0.05) %>% 
    dplyr::summarise(
      power = mean(pos[y_sim$ind_TP]),
      fdr = {
        if(!any(pos))
          0
        else
          sum((!y_sim$ind_TP) & pos) / sum(pos)
      }
    ) %>% 
    dplyr::mutate(i_job = i_job)
  l_tb_check_microCRT <- c(l_tb_check_microCRT, list(i_tb_check_microCRT))
}

tb_check_microCRT <- l_tb_check_microCRT %>% 
  purrr::reduce(rbind) %>% 
  dplyr::left_join(tb_job, by = "i_job")
save(tb_check_microCRT, file = "/n/janson_lab/lab/sma/CRT_microbiome/results/simulation/real_X/linear_Y/tb_check_microCRT.RData")

tb_results_summary <- tb_check_microCRT %>% 
  dplyr::group_by(method, n_samples, n_features, signal_density, effect_size, r_x) %>% 
  dplyr::summarise(power_mean_y = mean(power),
                   fdr_mean_y = mean(fdr)) %>% 
  dplyr::group_by(method, n_samples, n_features, signal_density, effect_size) %>% 
  dplyr::summarise(power_mean = mean(power_mean_y),
                   power_sd = sd(power_mean_y) / sqrt(dplyr::n()),
                   fdr_mean = mean(fdr_mean_y),
                   fdr_sd = sd(fdr_mean_y) / sqrt(dplyr::n()))

p_effect_power <- tb_results_summary %>% 
  dplyr::filter(n_samples == 200,
                n_features == 200,
                signal_density == 0.1) %>% 
  ggplot(aes(x = effect_size, y = power_mean, color = method)) +
  geom_point() +
  geom_errorbar(aes(ymax = power_mean + power_sd,
                    ymin = power_mean - power_sd)) +
  geom_line() +
  theme_bw()

p_effect_fdr <- tb_results_summary %>% 
  dplyr::filter(n_samples == 200,
                n_features == 200,
                signal_density == 0.1) %>% 
  ggplot(aes(x = effect_size, y = fdr_mean, color = method)) +
  geom_point() +
  geom_errorbar(aes(ymax = fdr_mean + fdr_sd,
                    ymin = fdr_mean - fdr_sd)) +
  geom_line() +
  geom_hline(yintercept = 0.05, linetype = "dashed") +
  theme_bw()


p_sigDensity_power <- tb_results_summary %>% 
  dplyr::filter(n_samples == 200,
                n_features == 200,
                effect_size == 0.15) %>% 
  ggplot(aes(x = signal_density, y = power_mean, color = method)) +
  geom_point() +
  geom_errorbar(aes(ymax = power_mean + power_sd,
                    ymin = power_mean - power_sd)) +
  geom_line() +
  theme_bw()

p_sigDensity_fdr <- tb_results_summary %>% 
  dplyr::filter(n_samples == 200,
                n_features == 200,
                effect_size == 0.15) %>% 
  ggplot(aes(x = signal_density, y = fdr_mean, color = method)) +
  geom_point() +
  geom_errorbar(aes(ymax = fdr_mean + fdr_sd,
                    ymin = fdr_mean - fdr_sd)) +
  geom_line() +
  geom_hline(yintercept = 0.05, linetype = "dashed") +
  theme_bw()

p_sampleSize_power <- tb_results_summary %>% 
  dplyr::filter(n_features == 200,
                effect_size == 0.15,
                signal_density == 0.1) %>% 
  ggplot(aes(x = n_samples, y = power_mean, color = method)) +
  geom_point() +
  geom_errorbar(aes(ymax = power_mean + power_sd,
                    ymin = power_mean - power_sd)) +
  geom_line() +
  theme_bw()

p_sampleSize_fdr <- tb_results_summary %>% 
  dplyr::filter(n_features == 200,
                effect_size == 0.15,
                signal_density == 0.1) %>% 
  ggplot(aes(x = n_samples, y = fdr_mean, color = method)) +
  geom_point() +
  geom_errorbar(aes(ymax = fdr_mean + fdr_sd,
                    ymin = fdr_mean - fdr_sd)) +
  geom_line() +
  geom_hline(yintercept = 0.05, linetype = "dashed") +
  theme_bw()

p_dimension_power <- tb_results_summary %>% 
  dplyr::filter(n_samples == 200,
                effect_size == 0.15,
                signal_density == 0.1) %>% 
  ggplot(aes(x = n_features, y = power_mean, color = method)) +
  geom_point() +
  geom_errorbar(aes(ymax = power_mean + power_sd,
                    ymin = power_mean - power_sd)) +
  geom_line() +
  theme_bw()

p_dimension_fdr <- tb_results_summary %>% 
  dplyr::filter(n_samples == 200,
                effect_size == 0.15,
                signal_density == 0.1) %>% 
  ggplot(aes(x = n_features, y = fdr_mean, color = method)) +
  geom_point() +
  geom_errorbar(aes(ymax = fdr_mean + fdr_sd,
                    ymin = fdr_mean - fdr_sd)) +
  geom_line() +
  geom_hline(yintercept = 0.05, linetype = "dashed") +
  theme_bw()
```

```{r sanity check random seed}
one_job_sancheck <- function(i_job) {
  
  # x data
  load("/n/janson_lab/lab/sma/CRT_microbiome/results/simulation/real_X/data_XY/mat_species.RData")
  source("/n/janson_lab/lab/sma/CRT_microbiome/CRT_microbiome/R/helpers.R")
  load(file.path(dir_output, "tb_job_knockoff.RData"))
  
  for(ii_job in seq((i_job - 1) * n_job_each + 1, i_job * n_job_each)) {
    # ensure that the random seed is the same
    set.seed(tb_job_knockoff[ii_job, ]$i_job)
    i_tb_job <- tb_job_knockoff[ii_job, ]
    
    i_x_obs <- mat_species[sample.int(nrow(mat_species), 
                                      size = i_tb_job$n_features),
                           seq(i_tb_job$n_samples * (i_tb_job$r_x - 1) + 1, 
                               i_tb_job$n_samples * i_tb_job$r_x)] %>% 
      apply(2, tss_withzero) %>% 
      t() 
    
    half_min <- min(setdiff(i_x_obs, 0)) / 2
    
    load(paste0(dir_output, "/y_sim_", i_tb_job$i_job, ".RData"))
    
    cors <- cor(y_sim$y, log(i_x_obs + half_min))[1, ]
    
    return(tibble::tibble(
      cors = cors,
      ind_TP = y_sim$ind_TP,
      i_job = i_tb_job$i_job
    ))
  }
}

tb_sancheck <- tb_job_knockoff %>% 
  dplyr::mutate(ii_job = seq(1, dplyr::n())) %>% 
  dplyr::filter(n_samples == 400) %>% 
  {.$ii_job} %>% 
  purrr::map_dfr(one_job_sancheck)
```
