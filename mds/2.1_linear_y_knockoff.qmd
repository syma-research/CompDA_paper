---
title: "Linear Y performance comparison (knockoff)"
output: html_document
---

* Method described in [Srinivasan, Lingzhou Xue, and Zhan, Biometrics, 2021](https://pubmed.ncbi.nlm.nih.gov/32683674/)

* This requires the packages `knockoff`, `energy`, `GUniFrac`, `RSpectra`, `gurobi`, 
  and [`MethylCapSig`](https://github.com/cran/MethylCapSig)

```{r setup, include=FALSE}
rm(list = ls())
library(magrittr)
library(ggplot2)
```

```{r batch job}
# batchtools::makeRegistry(
#   file.dir = "/n/janson_lab/lab/sma/CompDA_paper/r_batchtools_reg/knockoff",
#   package = c("magrittr"))
batchtools::loadRegistry(
  file.dir = "/n/janson_lab/lab/sma/CompDA_paper/r_batchtools_reg/knockoff",
  writeable = TRUE)
rm(list = ls())
```

```{r define job}
dir_output <- "/n/janson_lab/lab/sma/CompDA_paper/results/simulation/linear_Y"
load(paste0(dir_output, "/tb_job.RData"))
tb_job_knockoff <- 
  tb_job %>% 
  dplyr::filter(n_features == 200,
                signal_density == 0.1,
                effect_size == 0.15) %>% 
  dplyr::mutate(i_job_knockoff = seq(1, dplyr::n()))
save(tb_job_knockoff, file = paste0(dir_output, "/tb_job_knockoff.RData"))

one_job <- function(i_job) {
  # x data
  load("/n/janson_lab/lab/sma/CRT_microbiome/results/simulation/real_X/data_XY/mat_species.RData")
  source("/n/janson_lab/lab/sma/CompDA_paper/R/helpers.R")
  source("/n/janson_lab/lab/sma/CompDA_paper/R/knockoff/functionsCKF.R")
  source("/n/janson_lab/lab/sma/CompDA_paper/R/knockoff/utilityFnCKF.R")
  source("/n/janson_lab/lab/sma/CompDA_paper/R/knockoff/knockoff_main.R")
  
  load(paste0(dir_output, "/tb_job_knockoff.RData"))
  for(ii_job in seq((i_job - 1) * n_job_each + 1, i_job * n_job_each)) {
    i_tb_job <- tb_job_knockoff[ii_job, ]
    set.seed(i_tb_job$seed)
    
    i_x_obs <- mat_species[sample.int(nrow(mat_species), 
                                      size = i_tb_job$n_features),
                           seq(i_tb_job$n_samples * (i_tb_job$r_x - 1) + 1, 
                               i_tb_job$n_samples * i_tb_job$r_x)] %>% 
      apply(2, tss_withzero) %>% 
      t() 
    
    half_min <- min(setdiff(i_x_obs, 0)) / 2
    load(paste0(dir_output, "/data/y_sim_", i_tb_job$i_job, ".RData"))
    
    fit_knockoff <- 
      knockoff_R(x = i_x_obs, y = y_sim$y, epsilon = half_min, 60 * 10,
                 dir_debug = paste0(dir_output, "/debug/knockoff_",
                                    i_job))
    save(fit_knockoff, 
         file = paste0(dir_output, "/fit/knockoff_", i_tb_job$i_job, ".RData"))
  }
  
  return(NULL)
}
```

```{r submit jobs}
batchtools::clearRegistry()
n_job_each <- 1
tb_ids <- batchtools::batchMap(one_job,
                               i_job = seq(1, nrow(tb_job_knockoff) / n_job_each))
batchtools::batchExport(list(dir_output = dir_output,
                             n_job_each = n_job_each))

# Grid parameters
ncpus <- 1
partition <- "janson,janson_cascade,shared"
walltime <- 3600
memory <- 1024 * 4

batchtools::submitJobs(ids = seq(1, 10),
                       resources =  list(ncpus = ncpus,
                                         partition = partition,
                                         walltime = walltime,
                                         memory = memory))
batchtools::submitJobs(ids = batchtools::findNotSubmitted(),
                       resources =  list(ncpus = ncpus,
                                         partition = partition,
                                         walltime = walltime,
                                         memory = memory))
```
